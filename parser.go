package grimlang

import "github.com/alecthomas/participle/v2"

var Parser = participle.MustBuild[ModuleNode](
	participle.Lexer(Lexer),
	participle.UseLookahead(4),
	participle.Union[ModuleUnionNode](
		&FnNode{},
		&ConstNode{},
		&RecordNode{},
	),
	participle.Union[ConstantUnionNode](
		&ListNode{},
		&RecordConstructorNode{},
		&IntegerNode{},
		&FloatNode{},
		&BoolNode{},
		&StringNode{},
	),
	participle.Union[BlockUnionNode](
		&OperationNode{},
		&UnitNode{},
		&SymbolSeqNode{},
		&SymbolNode{},
		&CondNode{},
		&DefNode{},
		&VarNode{},
		&SetNode{},
		&WhileNode{},
		&ForNode{},
		&RangeNode{},
		&CallNode{},
	),
	participle.Union[DatatypeUnionNode](
		&PrimitiveNode{},
		&CompositeNode{},
		&RecordTypeNode{},
		&FnTypeNode{},
		&SymbolSeqNode{},
		&SymbolNode{},
	),
	participle.Union[ExpressionUnionNode](
		&OperationNode{},
		&ListNode{},
		&RecordConstructorNode{},
		&IntegerNode{},
		&FloatNode{},
		&BoolNode{},
		&StringNode{},
		&BlockNode{},
		&CondNode{},
		&CaseNode{},
		&LambdaNode{},
		&WhileNode{},
		&ForNode{},
		&RangeNode{},
		&CallNode{},
		&SymbolSeqNode{},
		&SymbolNode{},
	),
	participle.Union[IterableUnionNode](
		&ListNode{},
		&SymbolNode{},
		&CallNode{},
	),
	participle.Union[CallableUnionNode](
		&LambdaNode{},
		&SymbolSeqNode{},
		&SymbolNode{},
	),
	participle.Union[SymbolUnionNode](
		&SymbolSeqNode{},
		&SymbolNode{},
	),
)
